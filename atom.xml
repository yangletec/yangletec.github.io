<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AI码师</title>
  
  <subtitle>AI码师</subtitle>
  <link href="https://yangletec.github.io/atom.xml" rel="self"/>
  
  <link href="https://yangletec.github.io/"/>
  <updated>2021-02-26T15:55:58.915Z</updated>
  <id>https://yangletec.github.io/</id>
  
  <author>
    <name>AI码师</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第一篇博客</title>
    <link href="https://yangletec.github.io/2021/02/26/yuque/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://yangletec.github.io/2021/02/26/yuque/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-02-26T15:55:31.000Z</published>
    <updated>2021-02-26T15:55:58.915Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h3><p>Pig 2.0 采用的是 spring 官方的网关组件，通过异步背压的高性能网关。<br>路由配置是整个微服务中最为核心的功能</p><h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><p>我们以 UPMS 的路由为例子，注意注释</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment">#UPMS 模块</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">pig-upms</span>      <span class="comment"># 唯一的服务ID</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://pig-upms</span> <span class="comment"># 注册中心的服务名称，实现负载均衡</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/admin/**</span>  <span class="comment">#所有业务的请求前缀</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">          <span class="comment"># 限流配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span>    <span class="comment">#限流策略           args:</span></span><br><span class="line">            <span class="attr">key-resolver:</span> <span class="string">&#x27;#&#123;@remoteAddrKeyResolver&#125;&#x27;</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="pig-默认提供了全局的路由过滤器原理"><a href="#pig-默认提供了全局的路由过滤器原理" class="headerlink" title="pig 默认提供了全局的路由过滤器原理"></a>pig 默认提供了全局的路由过滤器原理</h3><p>PigRequestGlobalFilter,对全部的微服务提供了安全过滤（这个后边会讲）和全局 StripPrefix=1 配置，<strong>意味着你在使用 Pig 的时候，网关转发到业务模块时候会自动截取前缀，不用再每个微服务路由配置了 StripPrefixFilter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigRequestGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_NAME = <span class="string">&quot;X-Forwarded-Prefix&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1. 清洗请求头中from 参数</span></span><br><span class="line">ServerHttpRequest request = exchange.getRequest().mutate()</span><br><span class="line">.headers(httpHeaders -&gt; httpHeaders.remove(SecurityConstants.FROM))</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 重写StripPrefix</span></span><br><span class="line">addOriginalRequestUrl(exchange, request.getURI());</span><br><span class="line">String rawPath = request.getURI().getRawPath();</span><br><span class="line">String newPath = <span class="string">&quot;/&quot;</span> + Arrays.stream(StringUtils.tokenizeToStringArray(rawPath, <span class="string">&quot;/&quot;</span>))</span><br><span class="line">.skip(<span class="number">1L</span>).collect(Collectors.joining(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">ServerHttpRequest newRequest = request.mutate()</span><br><span class="line">.path(newPath)</span><br><span class="line">.build();</span><br><span class="line">exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR, newRequest.getURI());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> chain.filter(exchange.mutate()</span><br><span class="line">.request(newRequest.mutate()</span><br><span class="line">.build()).build());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Spring-Cloud-Gateway&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Gateway&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Gateway&quot;&gt;&lt;/a&gt;Spring Cloud Gateway&lt;/h3&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>dsfgsdfgsdf</title>
    <link href="https://yangletec.github.io/2021/02/26/yuque/dsfgsdfgsdf/"/>
    <id>https://yangletec.github.io/2021/02/26/yuque/dsfgsdfgsdf/</id>
    <published>2021-02-26T15:29:44.000Z</published>
    <updated>2021-02-26T15:55:58.853Z</updated>
    
    <content type="html"><![CDATA[<p>dsfgdfsgdsfgf<br>dsgffdsg</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;dsfgdfsgdsfgf&lt;br&gt;dsgffdsg&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title># 测试文档自动发布fsfsfdsdf</title>
    <link href="https://yangletec.github.io/2021/02/26/yuque/#%20%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83fsfsfdsdf/"/>
    <id>https://yangletec.github.io/2021/02/26/yuque/#%20%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83fsfsfdsdf/</id>
    <published>2021-02-26T15:22:52.000Z</published>
    <updated>2021-02-26T15:55:58.859Z</updated>
    
    <content type="html"><![CDATA[<p>大法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大法&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>博客第1期</title>
    <link href="https://yangletec.github.io/2021/02/26/yuque/%E5%8D%9A%E5%AE%A2%E7%AC%AC1%E6%9C%9F/"/>
    <id>https://yangletec.github.io/2021/02/26/yuque/%E5%8D%9A%E5%AE%A2%E7%AC%AC1%E6%9C%9F/</id>
    <published>2021-02-26T15:04:21.000Z</published>
    <updated>2021-02-26T15:55:58.887Z</updated>
    
    <content type="html"><![CDATA[<p>该博客模版案例来自  <a href="#">@蚂蚁金服体验技术部</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="插入带链接的标题（ctrl-K）Best-Year-in-Music"><a href="#插入带链接的标题（ctrl-K）Best-Year-in-Music" class="headerlink" title="插入带链接的标题（ctrl+K）Best Year in Music"></a>插入带链接的标题（ctrl+K）<a href="https://pudding.cool/projects/music-history/">Best Year in Music</a></h3><p>这幅可视化作品展示了 1960 年以来，Billboard  历年榜单的前五名音乐的变化情况，效果呈现设计感十足，还可以在聆听音乐的同时回顾音乐的变迁史。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/85075/1569743511172-7dfff3da-684a-4902-babc-cd9117fe3b7a.png#align=left&display=inline&height=648&name=image.png&originHeight=1296&originWidth=2868&size=965213&status=done&width=1434" alt="image.png"><br><em>插入图片，点击图片，设置图片大小</em><br>值得一提的是，作者正是大名鼎鼎的数据新闻站点  <a href="https://pudding.cool/">The Pudding</a>。作为可视化新闻媒体中的姣姣者，The Pudding 擅长对那些兼具信息量和娱乐度的争议性话题进行可视化呈现，来使得复杂的观点变得更容易被公众理解。该团队虽然仅由数名全职记者和工程师组成，但战斗力强悍，目前已有数十个大型的数据可视化作品。<br>输入作者  <a href="/dengfuping">@诸岳(dengfuping)</a></p><h3 id="Road-Suffixes-in-the-USA"><a href="#Road-Suffixes-in-the-USA" class="headerlink" title="Road Suffixes in the USA"></a><a href="https://erdavis.com/2019/07/04/road-suffixes-in-the-usa-take-2/">Road Suffixes in the USA</a></h3><p>美国道路命名多种多样，例如著名的纽约第五大道（Fifth Avenue），又或者凤凰城（Phoenix）的 Washington Street，Thomas Road，Union Hill Drive 等。不同的道路，有不同的叫法，Avenue, Street, Road, Drive 等等。想了解更多关于美国道路命名可以参考<a href="http://blog.sina.com.cn/s/blog_7010d1db0101he93.html">这篇文章</a>。<br>作者用 R 语言统计了美国每个县的每种道路后缀（例如 Avenue）的总里程，并把每个县总里程最大的道路后缀通过颜色映射到地图上。可以看出美国大部分县的道路都是以 Rd(Road 的缩写)结尾的。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/85075/1569743625739-f1c8b376-5632-4d08-8fcc-56142f0b0c1a.png#align=left&display=inline&height=603&name=road-suffix-map.png&originHeight=1767&originWidth=2048&size=328604&status=done&width=699" alt="road-suffix-map.png"><br><em>插入图片，点击图片，设置图片大小</em></p><p>另外还以柱状图的方式展示了每种道路后缀的总里程（英里）：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/85075/1569743625720-b8759449-4b6a-4b11-bbc0-896fe8dca73e.png#align=left&display=inline&height=737&name=road-suffix-bar.png&originHeight=737&originWidth=890&size=23572&status=done&width=890" alt="road-suffix-bar.png"><br>by <a href="/changzhe">@长哲(changzhe)</a></p><h1 id="「加餐」Hello-World-图可视化"><a href="#「加餐」Hello-World-图可视化" class="headerlink" title="「加餐」Hello World 图可视化"></a><a href="https://zhuanlan.zhihu.com/p/83685690">「</a><a href="https://zhuanlan.zhihu.com/p/83685690">加餐」</a><a href="https://zhuanlan.zhihu.com/p/83685690">Hello World 图可视化</a></h1><p>图可视化是信息可视化的子领域，它通过展示元素、关系，帮助用户获取数据的洞悉能力。它已被广泛地应用在流程图、社交网络、英特网、蛋白质网络等关系数据的呈现。<br><a href="https://zhuanlan.zhihu.com/p/83685690">本文</a>由 AntV 团队  <a href="/shiwu-5wap2">@十吾(shiwu-5wap2)</a> 👆 撰写，参考自[1][2]两篇图可视化学术论文，简要介绍图可视化的历史、背景、机遇与挑战。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;该博客模版案例来自  &lt;a href=&quot;#&quot;&gt;@蚂蚁金服体验技术部&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;插入带链接的标题（ctrl-K）Best-Year-in</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yangletec.github.io/2021/02/26/hello-world/"/>
    <id>https://yangletec.github.io/2021/02/26/hello-world/</id>
    <published>2021-02-26T13:56:14.695Z</published>
    <updated>2021-02-26T13:56:14.695Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
