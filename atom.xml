<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AI码师</title>
  
  <subtitle>授人以鱼不如授人以渔</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-27T08:46:38.074Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>AI码师</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/02/27/hello-world/"/>
    <id>http://example.com/2021/02/27/hello-world/</id>
    <published>2021-02-27T08:46:38.074Z</published>
    <updated>2021-02-27T08:46:38.074Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于我</title>
    <link href="http://example.com/2021/02/27/yuque/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    <id>http://example.com/2021/02/27/yuque/%E5%85%B3%E4%BA%8E%E6%88%91/</id>
    <published>2021-02-27T08:13:21.000Z</published>
    <updated>2021-02-27T08:47:02.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自语"><a href="#自语" class="headerlink" title="自语"></a>自语</h2><ul><li>大家好，我是一枚会前端的后端开发工程师 👨🏻‍💻，目前主攻 Java 后端开发.</li><li>我希望用代码改变世界,我也在改变世界,自豪脸 😏</li><li>目前正走在成为一个厉害(<del>Zhuang Bi</del>)程序猿的路上. 前途很艰辛, 但是我会坚持!</li><li>生活不止有撸码和工作, 也有诗和远方. 在快乐中生活, 在快乐中工作, 爱家人, 爱自己</li></ul><p><strong>子曰：生而知之者，上也；学而知之者，次也；困而学之，又其次也；困而不学，民斯为下矣。</strong><br><strong>人生得意须尽欢，莫使金樽空对月。</strong><br><strong>少小须勤学，文章可立身。满朝朱紫贵，尽是读书人。</strong></p><h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><ul><li>语言：Java, JavaScript, HTML, CSS</li><li>数据库：MySQL, Redis, Oracle</li><li>开发框架：Spring, Spring Boot, Spring Cloud, MyBatis, Guice, Shiro, React, JQuery，Bootstrap</li><li>中间件：Kafka, Zookeeper</li><li>构建工具： Maven, Tomcat</li><li>环境： Mac, Ubuntu, Linux, Git, Intellij IDEA</li></ul><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul><li>有道是学无止境，Java 后端开发的路很难走，但是既然走了这条路，那就得一直走下去。</li><li>Java 相关的技术栈很多，学起来很不容易，最近两年的行情也是优胜劣汰，希望自己能够快速成长起来</li><li>夯实基础，学习源码</li><li>今年想要学习一下 python</li></ul><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><ul><li>期望：平时生活和工作一种记录, 希望之后回过头再来看自己的博客也会有所收获或感想</li><li>技术、电影与生活</li><li>对生活和学习的一个记录</li><li>希望自己越来越强大，越来越开心</li></ul><h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><ul><li>本站所有文章为了记录工作、学习中遇到的问题，可能由于本人技术有限，有些不正确的地方，仅供参考</li><li>本站文章引用或转载写明来源，感谢原作者的辛苦写作，如果有异议或侵权，及时联系我处理，谢谢！</li><li>如他人引用本站中的文章或内容，请注明出处。但其文章或内容已不是本人原本的意思，请各位注意辨别！</li><li>本站所有文章仅代表个人当时意见和想法</li><li>欢迎指出有问题的地方，我会尽快修正，谢谢！</li><li>内容转载请保留署名以及原文连接，谢谢?</li><li>本网站所有作品采用 <a href="http://creativecommons.org/licenses/by-sa/4.0/">知识共享署名-相同方式共享 4.0 国际许可协议</a> 进行许可。</li></ul><h2 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/12552073/1614413919638-dbc082f4-5a1d-4fe9-a96f-3a2e101f6eb4.jpeg#align=left&display=inline&height=258&margin=%5Bobject%20Object%5D&name=qrcode_for_gh_92e86492eb35_258%20%282%29.jpg&originHeight=258&originWidth=258&size=27155&status=done&style=none&width=258" alt="qrcode_for_gh_92e86492eb35_258 (2).jpg"><br>关注公众号“AI 码师”领取 2021 最新面试资料一份</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自语&quot;&gt;&lt;a href=&quot;#自语&quot; class=&quot;headerlink&quot; title=&quot;自语&quot;&gt;&lt;/a&gt;自语&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;大家好，我是一枚会前端的后端开发工程师 👨🏻‍💻，目前主攻 Java 后端开发.&lt;/li&gt;
&lt;li&gt;我希望用代码改变世界,</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>工作经验｜lambada处理集合的常用10种实战骚操作，我都记录下来了</title>
    <link href="http://example.com/2021/02/27/yuque/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%EF%BD%9Clambada%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88%E7%9A%84%E5%B8%B8%E7%94%A810%E7%A7%8D%E5%AE%9E%E6%88%98%E9%AA%9A%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%88%91%E9%83%BD%E8%AE%B0%E5%BD%95%E4%B8%8B%E6%9D%A5%E4%BA%86/"/>
    <id>http://example.com/2021/02/27/yuque/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%EF%BD%9Clambada%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88%E7%9A%84%E5%B8%B8%E7%94%A810%E7%A7%8D%E5%AE%9E%E6%88%98%E9%AA%9A%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%88%91%E9%83%BD%E8%AE%B0%E5%BD%95%E4%B8%8B%E6%9D%A5%E4%BA%86/</id>
    <published>2021-02-27T06:54:08.000Z</published>
    <updated>2021-02-27T08:47:02.374Z</updated>
    
    <content type="html"><![CDATA[<p>关注公众号“AI 码师”领取 2021 最新面试资料一份，公众号内回复“源码”，获取本项目源码</p><p>最近在项目上面经常使用 lambada 表达式，但是总是记不住，一直都在百度，写完之后就忘记了，感觉很费时间；这次就花点时间，把一些常用的 lambada 处理集合的实例都保存了下来(去重，分组，求和，list 转 map 等等)，以后就不用到处找了，刚好也可以给同学们分享下；另外也把一些关于使用 lambada 时遇到的坑也给大家一起分享下，所有代码拿来即用！！！本文档持续更新…</p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>商品实体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class GoodInfo &#123;</span><br><span class="line">    private String mallSource;</span><br><span class="line">    private String skuNo;</span><br><span class="line">    private int price;</span><br><span class="line">    private int monthCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>集合排序在项目中用的频率还蛮高，这里以按照销量排序为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 按照销量正序 从小到大排序</span><br><span class="line"> goodInfos.sort(Comparator.comparing(GoodInfo::getMonthCount));</span><br><span class="line"> &#x2F;&#x2F; 按照销量倒序 从大到小排序</span><br><span class="line"> goodInfos.sort(Comparator.comparing(GoodInfo::getMonthCount).reversed());</span><br></pre></td></tr></table></figure><h3 id="取最大值-取最小值-求和"><a href="#取最大值-取最小值-求和" class="headerlink" title="取最大值/取最小值/求和"></a>取最大值/取最小值/求和</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取最大销量  注意如果求最大值是在filter之后使用例如，goodInfos.stream().filter().max一定要判断filter后集合数量是否不为空，否则使用max的get方法会报错</span><br><span class="line">GoodInfo hotGoodInfo &#x3D; goodInfos.stream().max(Comparator.comparing(GoodInfo::getMonthCount)).get();</span><br><span class="line">&#x2F;&#x2F; 求最低价格商品</span><br><span class="line">GoodInfo lowPriceGoodInfo &#x3D; goodInfos.stream().min(Comparator.comparing(GoodInfo::getMonthCount)).get();</span><br><span class="line">&#x2F;&#x2F; 计算商品总价格</span><br><span class="line">int sum &#x3D; goodInfos.stream().mapToInt(person -&gt; person.getPrice()).sum();</span><br><span class="line">&#x2F;&#x2F; 求平均价格</span><br><span class="line">double avg &#x3D; goodInfos.stream().mapToInt(person -&gt; person.getPrice()).average().getAsDouble();</span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 遍历输出所有商品id</span><br><span class="line"> goodInfos.forEach(</span><br><span class="line">     goodInfo -&gt; &#123;</span><br><span class="line">       System.out.println(goodInfo.getSkuNo());</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><h3 id="实体集合-转-单个属性的集合"><a href="#实体集合-转-单个属性的集合" class="headerlink" title="实体集合 转 单个属性的集合"></a>实体集合 转 单个属性的集合</h3><p>往往在我们项目中会有这样的需求：我需要提取集合中某一个属性，然后组装成集合，通常做法是先创建一个字符串集合，然后遍历原始集合，取出数据，放到字符串集合中，虽然也能实现功能，但是不免太过于繁琐，现在使用一行 lambada 表达式即可搞定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将list转为某个属性map 这里是把所有skuno全部取出来 作为集合</span><br><span class="line">List&lt;String&gt; skuNos &#x3D; goodInfos.stream().map(goodInfo -&gt; goodInfo.getSkuNo()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="实体集合-转-map-返回"><a href="#实体集合-转-map-返回" class="headerlink" title="实体集合 转 map 返回"></a>实体集合 转 map 返回</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将list转为map，key 为商品id</span><br><span class="line">Map&lt;String, GoodInfo&gt; map &#x3D; goodInfos.stream().collect(Collectors.toMap(GoodInfo::getSkuNo, goodInfo -&gt; goodInfo));</span><br></pre></td></tr></table></figure><h3 id="实体集合按照某个属性分组"><a href="#实体集合按照某个属性分组" class="headerlink" title="实体集合按照某个属性分组"></a>实体集合按照某个属性分组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 按照商品来源分组</span><br><span class="line">Map&lt;String, List&lt;GoodInfo&gt;&gt; map &#x3D; goodInfos.stream().collect(Collectors.groupingBy(GoodInfo::getMallSource));</span><br></pre></td></tr></table></figure><h3 id="过滤数据（记得接收）"><a href="#过滤数据（记得接收）" class="headerlink" title="过滤数据（记得接收）"></a>过滤数据（记得接收）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 过滤商品价格大于300的</span><br><span class="line">&#x2F;&#x2F; todo 过滤后一定要使用集合接收，否则等于没有过滤</span><br><span class="line"></span><br><span class="line">List&lt;GoodInfo&gt; collect &#x3D;</span><br><span class="line">    goodInfos.stream()</span><br><span class="line">        .filter(goodInfo -&gt; goodInfo.getPrice() &gt; 300)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">collect.forEach(</span><br><span class="line">    goodInfo -&gt; &#123;</span><br><span class="line">      System.out.println(goodInfo.getPrice());</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="去重-两种方法可选"><a href="#去重-两种方法可选" class="headerlink" title="去重(两种方法可选)"></a>去重(两种方法可选)</h3><h4 id="方法一-set-去重"><a href="#方法一-set-去重" class="headerlink" title="方法一 set 去重"></a>方法一 set 去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用treeset 集合来实现去重，这里一定要使用集合接收，不然等于没有去重</span><br><span class="line">List&lt;GoodInfo&gt; goodInfos1 &#x3D;</span><br><span class="line">    goodInfos.stream()</span><br><span class="line">        .collect(</span><br><span class="line">            Collectors.collectingAndThen(</span><br><span class="line">                Collectors.toCollection(</span><br><span class="line">                    () -&gt; new TreeSet&lt;&gt;(Comparator.comparing(o -&gt; o.getSkuNo()))),</span><br><span class="line">                ArrayList::new));</span><br></pre></td></tr></table></figure><h4 id="方法二-map-去重"><a href="#方法二-map-去重" class="headerlink" title="方法二 map 去重"></a>方法二 map 去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 使用map去重</span><br><span class="line">    List&lt;GoodInfo&gt; goodInfos2 &#x3D;</span><br><span class="line">        goodInfos.stream()</span><br><span class="line">            .filter(distinctByKey(goodInfo -&gt; goodInfo.getSkuNo()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static &lt;T&gt; Predicate&lt;T&gt; distinctByKey(Function&lt;? super T, ?&gt; keyExtractor) &#123;</span><br><span class="line">    Map&lt;Object, Boolean&gt; seen &#x3D; new ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    return t -&gt; seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) &#x3D;&#x3D; null;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="坑一"><a href="#坑一" class="headerlink" title="坑一"></a>坑一</h3><ul><li>报错信息：<br>java.util.NoSuchElementException: No value present</li><li>解决方案：<br>一般出现这个错都是在 filter 操作后面使用了 max/min 等操作，然后调用了 get 方法，取不到数据，导致报错，所以建议检查 filter 操作后时候还有数据，有数据再进行后续操作：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    Optional&lt;User&gt; optional &#x3D; goodInfos.stream().max(userComparator);</span><br><span class="line">if(optional !&#x3D; null &amp;&amp; optional.isPresent()) &#123;</span><br><span class="line">    recentUserServer &#x3D; optional.get().getServer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="坑二"><a href="#坑二" class="headerlink" title="坑二"></a>坑二</h3><ul><li>使用了 filter 为什么没起作用呢？</li></ul><p>调用 filter 之后，它是有返回值的，所以你需要使用新的集合去接收</p><p>。。。</p><p>后续慢慢填坑</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关注公众号“AI 码师”领取 2021 最新面试资料一份，公众号内回复“源码”，获取本项目源码&lt;/p&gt;
&lt;p&gt;最近在项目上面经常使用 lambada 表达式，但是总是记不住，一直都在百度，写完之后就忘记了，感觉很费时间；这次就花点时间，把一些常用的 lambada 处理集合</summary>
      
    
    
    
    
  </entry>
  
</feed>
