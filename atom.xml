<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AI码师</title>
  
  <subtitle>授人以鱼不如授人以渔</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-27T09:51:56.058Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>AI码师</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/02/27/hello-world/"/>
    <id>http://example.com/2021/02/27/hello-world/</id>
    <published>2021-02-27T09:51:56.058Z</published>
    <updated>2021-02-27T09:51:56.058Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>趣味编程故事｜java进程占用cpu过高怎么办，别急我来帮你</title>
    <link href="http://example.com/2021/02/27/yuque/%E8%B6%A3%E5%91%B3%E7%BC%96%E7%A8%8B%E6%95%85%E4%BA%8B%EF%BD%9Cjava%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8cpu%E8%BF%87%E9%AB%98%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%8C%E5%88%AB%E6%80%A5%E6%88%91%E6%9D%A5%E5%B8%AE%E4%BD%A0/"/>
    <id>http://example.com/2021/02/27/yuque/%E8%B6%A3%E5%91%B3%E7%BC%96%E7%A8%8B%E6%95%85%E4%BA%8B%EF%BD%9Cjava%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8cpu%E8%BF%87%E9%AB%98%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%8C%E5%88%AB%E6%80%A5%E6%88%91%E6%9D%A5%E5%B8%AE%E4%BD%A0/</id>
    <published>2021-02-27T09:43:33.000Z</published>
    <updated>2021-02-27T09:52:24.227Z</updated>
    
    <content type="html"><![CDATA[<hr><p>tags: [elk, springboot]<br>categories: 分布式专题</p><hr><hr><p>关注公众号“AI 码师”领取 2021 最新面试资料一份</p><h2 id="【主演】"><a href="#【主演】" class="headerlink" title="【主演】"></a>【主演】</h2><p>运维小哥：小李</p><p>测试小姐姐：小红</p><p>开发人员：本色出演</p><h2 id="【剧情】"><a href="#【剧情】" class="headerlink" title="【剧情】"></a>【剧情】</h2><p>在一个阳光明媚的清晨，原本还在睡梦中的我，被小李（运维小哥）的电话给惊醒了。<br>小李：线上告警出来一个问题，赶快看一下！<br>我：啥问题啊？<br>小李：xx 服务器 现在 cpu 已经 100%了，我刚才查了下是 java 进程占用的<br>我：好的，我来看下</p><p>我赶紧打开我的电脑，连接上了 xx 服务器，使用 top 命令查了下，确实是 java 进程占用 cpu 最高，我大脑飞速旋转想到:这几天也没有对程序做什么大改动啊，怎么会出现这个问题呢；</p><p>于是我把本地代码切换到 master 分支，在本地跑了下发布到线上的代码，观察了一会，也没看见 cpu 占用很高啊，我就很纳闷了，然后又上服务器看了下，java 进程占用 cpu 还是比较高的，这是怎么回事呢？难道要拿出我的杀手锏？</p><p>接下来场面就比较血腥了，前方高能预警，系好安全带</p><h2 id="【高能预警】"><a href="#【高能预警】" class="headerlink" title="【高能预警】"></a>【高能预警】</h2><p>我拿出了杀手锏，江湖上失传已久的九阴真经（其实就是平时的笔记哈哈），在上面找了一些命令，然后就是接下来的场景了：</p><p>【步骤一】找到最耗 cpu 的进程</p><p>top<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614419045130-6b142a76-4962-4434-8111-f269e0fd1ac2.png#align=left&display=inline&height=162&margin=%5Bobject%20Object%5D&originHeight=162&originWidth=1134&size=0&status=done&style=none&width=1134"></p><p>得到最占用 CPU 的进程为：39890</p><p>【步骤二】找到 39890 进程中最消耗 cpu 的线程</p><p>top -d 1 -Hp 39890</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614419045069-524634bf-ca5f-41c4-9d0b-92dba0e634d0.png#align=left&display=inline&height=338&margin=%5Bobject%20Object%5D&originHeight=338&originWidth=1136&size=0&status=done&style=none&width=1136"></p><p>得到最耗 CPU 的进程为 39900</p><p>【步骤二】将 PID 转换为十六进制</p><p>我们拿到了进程 PID 为：39900<br>我们需要将它转为十六进制，才能进行后续指令操作<br>printf “%x\n” 39900<br>得到结果：9bdc<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614419045070-0e7c7eff-c3dd-495e-bd51-0fbb6967a404.png#align=left&display=inline&height=82&margin=%5Bobject%20Object%5D&originHeight=82&originWidth=542&size=0&status=done&style=none&width=542"></p><p>【步骤三】打印当前线程的栈信息，看看它到底在干嘛</p><p>jstack 39890 | grep ‘9bdc’ -C5<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614419045176-b3063503-78e6-4697-83bd-abfe95ca31dd.png#align=left&display=inline&height=356&margin=%5Bobject%20Object%5D&originHeight=356&originWidth=1320&size=0&status=done&style=none&width=1320"></p><p>现在已经找到了线程的栈信息，我看到了我自己写的代码，我用红框标记出来了</p><p>【步骤四】带着疑问去找代码</p><p>我们根据栈信息，直接在我们项目上定位到了那段代码<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614419045079-ba7a782e-3ef6-492f-89e2-bdd1a6d0430f.png#align=left&display=inline&height=382&margin=%5Bobject%20Object%5D&originHeight=382&originWidth=918&size=0&status=done&style=none&width=918"></p><p>我发现，这里有一个死循环，我擦，忘记加休眠时间了，导致一直在死循环跑呢，终于找到问题根源了，加上了休眠时间，然后本地测试了下没问题；</p><p>关键这是线上的问题，得要赶紧上线啊，但是也得测试呢，我不得不拨通了小红（测试小姐姐）的电话，嘀。嘀。嘀。，我心里也在滴滴滴，这么早打电话给她让她测试，免不了被训，我已经做好了心里准备了，咦，通了：</p><p>小红：干啥？（测试小姐姐总是这么彪悍）</p><p>我：有有有一个小小的线上问题(说话已经开始紧张了，生怕她开骂，哈哈)，我已经改好了，需要你测试下，然后抓紧上线。</p><p>小红：今天不是周末么，还要测试，让不让人睡觉了啊？</p><p>我：我我。。。，小姐姐，你长得这么可爱，美丽，端庄，温柔，贤惠，就帮忙测试下么，不然我这个月绩效又要被扣了…</p><p>小红：看你这么诚实，这次就勉强帮你测试下吧，但是下次不要在周末给我发提测了。</p><p>我：好的呢，下…(对方已经挂断了电话…)</p><p>哈哈，不管咋样，现在已经没我的事了，我合上电脑，又进入了梦乡…</p><h2 id="全剧终"><a href="#全剧终" class="headerlink" title="全剧终"></a>全剧终</h2><p>经历了一次线上 bug 排查，让我胆战心惊，不过这次也给我增加了不少经验，毕竟重拾了 九阴正经，让我内功又增强了；<br>后期会发布更多在实战方面的工作经验，与大家分享，希望大家能够喜欢，现在我需要你们的一键三连，哈哈，下期见。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;tags: [elk, springboot]&lt;br&gt;categories: 分布式专题&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;关注公众号“AI 码师”领取 2021 最新面试资料一份&lt;/p&gt;
&lt;h2 id=&quot;【主演】&quot;&gt;&lt;a href=&quot;#【主演】&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>5年老java开发，我看过哪些书，看过哪些视频，刷过哪些面试题，都在这里了</title>
    <link href="http://example.com/2021/02/27/yuque/5%E5%B9%B4%E8%80%81java%E5%BC%80%E5%8F%91%EF%BC%8C%E6%88%91%E7%9C%8B%E8%BF%87%E5%93%AA%E4%BA%9B%E4%B9%A6%EF%BC%8C%E7%9C%8B%E8%BF%87%E5%93%AA%E4%BA%9B%E8%A7%86%E9%A2%91%EF%BC%8C%E5%88%B7%E8%BF%87%E5%93%AA%E4%BA%9B%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C%E4%BA%86/"/>
    <id>http://example.com/2021/02/27/yuque/5%E5%B9%B4%E8%80%81java%E5%BC%80%E5%8F%91%EF%BC%8C%E6%88%91%E7%9C%8B%E8%BF%87%E5%93%AA%E4%BA%9B%E4%B9%A6%EF%BC%8C%E7%9C%8B%E8%BF%87%E5%93%AA%E4%BA%9B%E8%A7%86%E9%A2%91%EF%BC%8C%E5%88%B7%E8%BF%87%E5%93%AA%E4%BA%9B%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C%E4%BA%86/</id>
    <published>2021-02-27T09:40:32.000Z</published>
    <updated>2021-02-27T09:52:24.247Z</updated>
    
    <content type="html"><![CDATA[<hr><p>tags: [面试, 资料]<br>categories: 面试</p><hr><hr><p>本篇文章没有任何水文，全是干货</p><p>作为 5 年开发工程师，拥有 5 年一线大厂的开发经验； 在大学就开始自学 java，在这期间有迷茫过，也想放弃过，但是最后都坚持了下来；</p><p>现在我把我自己一路走来珍藏的资料和学习方法都分享给大家，谨献给有需要的和准备涉及此行业的同学。</p><blockquote><p>关注公众号“AI 码师”,公众号内回复“5 年”，可免费领取资料</p></blockquote><p>电子书籍大概 2.5g；视频教程大概 7.3g；</p><h1 id="电子书籍"><a href="#电子书籍" class="headerlink" title="电子书籍"></a>电子书籍</h1><h2 id="JAVA-入门必备"><a href="#JAVA-入门必备" class="headerlink" title="JAVA 入门必备"></a>JAVA 入门必备</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614418933484-96dc6c72-d81c-42a4-bd44-251b9e2b873c.png#align=left&display=inline&height=236&margin=%5Bobject%20Object%5D&originHeight=236&originWidth=620&size=0&status=done&style=none&width=620"></p><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614418933392-c4473b13-eced-44b4-ac7b-161330ca0dcf.png#align=left&display=inline&height=116&margin=%5Bobject%20Object%5D&originHeight=116&originWidth=586&size=0&status=done&style=none&width=586"></p><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614418933441-70c9ea58-b879-4a64-8997-0b8bcdcbf07e.png#align=left&display=inline&height=356&margin=%5Bobject%20Object%5D&originHeight=356&originWidth=642&size=0&status=done&style=none&width=642"></p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614418933473-a4024fe9-315f-4ebc-a8c9-f92eb0ecc5cc.png#align=left&display=inline&height=396&margin=%5Bobject%20Object%5D&originHeight=396&originWidth=1006&size=0&status=done&style=none&width=1006"></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614418933402-c0aa8cba-7a8d-47c8-9c5e-a5cf1cb9aed1.png#align=left&display=inline&height=160&margin=%5Bobject%20Object%5D&originHeight=160&originWidth=686&size=0&status=done&style=none&width=686"></p><h2 id="阿里技术图册"><a href="#阿里技术图册" class="headerlink" title="阿里技术图册"></a>阿里技术图册</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614418933431-86a736a4-2731-480f-b05e-8c7e69c7b922.png#align=left&display=inline&height=118&margin=%5Bobject%20Object%5D&originHeight=118&originWidth=590&size=0&status=done&style=none&width=590"></p><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614418933404-c45cda8e-b95c-4104-973b-3024cc12554e.png#align=left&display=inline&height=160&margin=%5Bobject%20Object%5D&originHeight=160&originWidth=806&size=0&status=done&style=none&width=806"></p><h2 id="2021-最新面试资料（四套）"><a href="#2021-最新面试资料（四套）" class="headerlink" title="2021 最新面试资料（四套）"></a>2021 最新面试资料（四套）</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614418933458-b8ec1eda-1e1c-4332-82b4-04951ad130b9.png#align=left&display=inline&height=1668&margin=%5Bobject%20Object%5D&originHeight=1668&originWidth=820&size=0&status=done&style=none&width=820"></p><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><h2 id="架构师教程"><a href="#架构师教程" class="headerlink" title="架构师教程"></a>架构师教程</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614418933506-be203f49-1c17-41d0-8ffc-d8a6876e2e90.png#align=left&display=inline&height=708&margin=%5Bobject%20Object%5D&originHeight=708&originWidth=1008&size=0&status=done&style=none&width=1008"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;tags: [面试, 资料]&lt;br&gt;categories: 面试&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;本篇文章没有任何水文，全是干货&lt;/p&gt;
&lt;p&gt;作为 5 年开发工程师，拥有 5 年一线大厂的开发经验； 在大学就开始自学 java，在这期间有迷茫过，也想放弃过，但</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>趣味编程｜手写一个集成多数据源mongodb的 starter</title>
    <link href="http://example.com/2021/02/27/yuque/%E8%B6%A3%E5%91%B3%E7%BC%96%E7%A8%8B%EF%BD%9C%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E9%9B%86%E6%88%90%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90mongodb%E7%9A%84%20starter/"/>
    <id>http://example.com/2021/02/27/yuque/%E8%B6%A3%E5%91%B3%E7%BC%96%E7%A8%8B%EF%BD%9C%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E9%9B%86%E6%88%90%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90mongodb%E7%9A%84%20starter/</id>
    <published>2021-02-27T08:50:31.000Z</published>
    <updated>2021-02-27T09:52:24.355Z</updated>
    
    <content type="html"><![CDATA[<p>关注公众号“AI 码师”领取 2021 最新面试资料一份，公众号内回复“源码”，获取本项目源码</p><h2 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h2><p>主演：老王(技术总监)，小码（本猿）</p><p>老王：小码啊，我们项目中需要使用到 mongodb，你集成下吧，完成了和我说下。</p><p>小码：好的，一会就给你弄好。</p><p>小码三下五除二的给集成好了，然后给老王汇报了。</p><p>小码：王哥，我已经把 mongodb 集成好了。</p><p>老王：好的，现在由于我们项目中会用到很多 mongo 数据库，你现在集成的 mongo 支持多数据源动态切换么？</p><p>小码：这个，这个，啥叫多数据源动态切换啊？</p><p>老王：就是在运行过程中，能够根据需要动态去连接哪个数据库，咱们项目需要支持多个特性，如果你对这个不太清楚的话，我给你一个思路，你可以考虑使用切面来实现，具体怎么弄，你自己研究下.</p><p>小码：好的，王哥。</p><p>小码想了很久，各种百度，终于找到了解决方案，花了一上午的时间，终于弄完了，又去给老王汇报了。</p><p>小码：王哥，现在项目中的 mongo 已经实现了多数据源了（哈哈，心里很自豪）。</p><p>老王：小伙子，很快嘛，不过现在又来一个任务，你需要把你集成的这个功能封装成一个 starter，另外一个项目也需要使用这个功能，你抽时间封装下吧。</p><p>小码：好的，王哥，保证完成任务</p><p>小码下去之后，就开始研究怎么去封装成一个 starter，下班之前弄好了，不过这次他没去找老王了，准备第二天再去，不然又得加班，哈哈！！！</p><h2 id="【正文】"><a href="#【正文】" class="headerlink" title="【正文】"></a>【正文】</h2><p>前面水了那么多，主要是给大家设置一种场景，让同志们知道为啥要去做这么一个功能，现在就直接进入正题了：</p><h3 id="【springboot-集成-mongodb】"><a href="#【springboot-集成-mongodb】" class="headerlink" title="【springboot 集成 mongodb】"></a>【springboot 集成 mongodb】</h3><ul><li>引入 mongodb 依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>配置 mongodb 连接信息，在 application.yml 中配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 设置了用户名和密码的连接</span><br><span class="line">spring:</span><br><span class="line">  data:</span><br><span class="line">    mongodb:</span><br><span class="line">      uri: mongodb:&#x2F;&#x2F;用户名:密码@IP:PORT&#x2F;数据库?authSource&#x3D;$&#123;auth_db:用户认证数据库&#125;</span><br><span class="line"># 没有设置用户名和密码的连接配置</span><br><span class="line">spring:</span><br><span class="line">    data:</span><br><span class="line">        mongodb:</span><br><span class="line">            uri: mongodb:&#x2F;&#x2F;IP:PORT&#x2F;数据库</span><br></pre></td></tr></table></figure><ul><li>写测试代码</li></ul><p>我们创建一个接口，然后在接口方法中去操作 monog 库:</p><p>接口中，直接引入 MongoTemplate，就可以直接操作 mongo 了，这里对 mongo 如何使用不做过多介绍。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Created by AI码师 on 2019&#x2F;4&#x2F;19.</span><br><span class="line"> * 关注公众号【AI码师】领取2021最新面试资料一份（很全）</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(&quot;&#x2F;home&quot;)</span><br><span class="line">@RestController</span><br><span class="line">public class HomeController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private MongoTemplate mongoTemplate;</span><br><span class="line">    @PostMapping</span><br><span class="line">    public String addData(@RequestParam(value &#x3D; &quot;name&quot;) String name,@RequestParam(value &#x3D; &quot;addr&quot;) String addr,@RequestParam(value &#x3D; &quot;email&quot;) String email)&#123;</span><br><span class="line">        Student student &#x3D; new Student();</span><br><span class="line">        student.setAddr(addr);</span><br><span class="line">        student.setName(name);</span><br><span class="line">        student.setEmail(email);</span><br><span class="line">        mongoTemplate.insert(student);</span><br><span class="line">        return &quot;添加成功&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求接口：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614415836996-a6a5f7b5-0a7b-4255-8ccc-36612ba56da2.png#align=left&display=inline&height=530&margin=%5Bobject%20Object%5D&originHeight=530&originWidth=2794&size=0&status=done&style=none&width=2794"></p><p>响应数据：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614415837055-ae8ec38c-c18d-403d-ac65-dc9b7f60b857.png#align=left&display=inline&height=666&margin=%5Bobject%20Object%5D&originHeight=666&originWidth=2622&size=0&status=done&style=none&width=2622"></p><p>响应添加成功，我们看下数据库，是否添加上去了：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614415837001-ff379413-9118-4214-90b6-658c7d14a0f8.png#align=left&display=inline&height=272&margin=%5Bobject%20Object%5D&originHeight=272&originWidth=2530&size=0&status=done&style=none&width=2530"></p><p>数据已经添加上去了，说明已经集成成功了，但这还是第一步，我们需要做的是支持多数据源，接下来我们一起来完成逼格更高的多数据源 mongo 吧。</p><h3 id="【实现多数据源】"><a href="#【实现多数据源】" class="headerlink" title="【实现多数据源】"></a>【实现多数据源】</h3><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>先介绍下实现多数据源动态切换的思路：</p><p>首先通过 AOP 技术，在调用方法前后动态替换 mongo 数据源，这个主要是替换 mongo 中 mongodbfactory(SimpleMongoClientDatabaseFactory)值,每个 factory 都维护自己需要连接的库，如果在操作之前，替换该参数为自己需要操作的数据库 factory，操作结束又切换成原来的，不就可以实现动态切换数据源了么。</p><p>说完了思路，我们直接上代码吧</p><h4 id="垒代码"><a href="#垒代码" class="headerlink" title="垒代码"></a>垒代码</h4><ul><li>添加 aop 依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--引入AOP依赖--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>修改数据库连接配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 设置了用户名和密码的连接</span><br><span class="line">spring:</span><br><span class="line">  data:</span><br><span class="line">    mongodb:</span><br><span class="line">      uri: mongodb:&#x2F;&#x2F;用户名:密码@IP:PORT&#x2F;#?authSource&#x3D;$&#123;auth_db:用户认证数据库&#125;</span><br><span class="line"># 没有设置用户名和密码的连接配置</span><br><span class="line">spring:</span><br><span class="line">    data:</span><br><span class="line">        mongodb:</span><br><span class="line">            uri: mongodb:&#x2F;&#x2F;IP:PORT&#x2F;#</span><br><span class="line"></span><br><span class="line">与上述配置，做了小小的改动，将操作的数据库名称替换成了#，用来做后续备用</span><br></pre></td></tr></table></figure><ul><li>创建切面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">package com.aimashi.dynamicmongo.config;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.Around;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.data.mongodb.core.MongoDatabaseFactorySupport;</span><br><span class="line">import org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line">import org.springframework.data.mongodb.core.SimpleMongoClientDatabaseFactory;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by AI码师 on 2019&#x2F;4&#x2F;19.</span><br><span class="line"> * 关注公众号【AI码师】领取2021最新面试资料一份（很全）</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public class MongoSwitch &#123;</span><br><span class="line">  private final Logger logger &#x3D; LoggerFactory.getLogger(MongoSwitch.class);</span><br><span class="line"></span><br><span class="line">  @Autowired private MongoDatabaseFactorySupport mongoDbFactory;</span><br><span class="line">  private final Map&lt;String, MongoDatabaseFactorySupport&gt; templateMuliteMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">  &#x2F;&#x2F; 获取配置文件的副本集连接</span><br><span class="line">  @Value(&quot;$&#123;spring.data.mongodb.uri&#125;&quot;)</span><br><span class="line">  private String uri;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;@Pointcut(&quot;@annotation(com.pig4cloud.pig.common.log.annotation.MongoLog)&quot;)</span><br><span class="line">  @Pointcut(&quot;execution(public * com.aimashi.dynamicmongo.config.MongotemplteService.*(..))&quot;)</span><br><span class="line">  public void routeMongoDB() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  @Around(&quot;routeMongoDB()&quot;)</span><br><span class="line">  public Object routeMongoDB(ProceedingJoinPoint joinPoint) &#123;</span><br><span class="line">    Object result &#x3D; null;</span><br><span class="line">    &#x2F;&#x2F; 获取需要访问的项目数据库</span><br><span class="line">    String dbName &#x3D; (String) joinPoint.getArgs()[0];</span><br><span class="line">    Object o &#x3D; joinPoint.getTarget();</span><br><span class="line">    Field[] fields &#x3D; o.getClass().getDeclaredFields();</span><br><span class="line">    MultiMongoTemplate mongoTemplate &#x3D; null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">      for (Field field : fields) &#123;</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line"></span><br><span class="line">        Class fieldclass &#x3D; field.getType();</span><br><span class="line">        &#x2F;&#x2F; 找到Template的变量</span><br><span class="line">        if (fieldclass &#x3D;&#x3D; MongoTemplate.class || fieldclass &#x3D;&#x3D; MultiMongoTemplate.class) &#123;</span><br><span class="line">          &#x2F;&#x2F; 查找项目对应的MongFactory</span><br><span class="line">          SimpleMongoClientDatabaseFactory simpleMongoClientDbFactory &#x3D; null;</span><br><span class="line">          &#x2F;&#x2F; 实例化</span><br><span class="line">          if (templateMuliteMap.get(dbName) &#x3D;&#x3D; null) &#123; &#x2F;&#x2F; 替换数据源</span><br><span class="line">            simpleMongoClientDbFactory &#x3D;</span><br><span class="line">                new SimpleMongoClientDatabaseFactory(this.uri.replace(&quot;#&quot;, dbName));</span><br><span class="line">            templateMuliteMap.put(dbName, simpleMongoClientDbFactory);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            simpleMongoClientDbFactory &#x3D;</span><br><span class="line">                (SimpleMongoClientDatabaseFactory) templateMuliteMap.get(dbName);</span><br><span class="line">          &#125;</span><br><span class="line">          &#x2F;&#x2F; 如果第一次，赋值成自定义的MongoTemplate子类</span><br><span class="line">          if (fieldclass &#x3D;&#x3D; MongoTemplate.class) &#123;</span><br><span class="line">            mongoTemplate &#x3D; new MultiMongoTemplate(simpleMongoClientDbFactory);</span><br><span class="line">          &#125; else if (fieldclass &#x3D;&#x3D; MultiMongoTemplate.class) &#123;</span><br><span class="line">            Object fieldObject &#x3D; field.get(o);</span><br><span class="line">            mongoTemplate &#x3D; (MultiMongoTemplate) fieldObject;</span><br><span class="line">          &#125;</span><br><span class="line">          &#x2F;&#x2F; 设置MongoFactory</span><br><span class="line">          mongoTemplate.setMongoDbFactory(simpleMongoClientDbFactory);</span><br><span class="line">          &#x2F;&#x2F; 重新赋值</span><br><span class="line">          field.set(o, mongoTemplate);</span><br><span class="line">          break;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      try &#123;</span><br><span class="line">        result &#x3D; joinPoint.proceed();</span><br><span class="line">        &#x2F;&#x2F; 清理ThreadLocal的变量</span><br><span class="line">        mongoTemplate.removeMongoDbFactory();</span><br><span class="line">      &#125; catch (Throwable t) &#123;</span><br><span class="line">        logger.error(&quot;&quot;, t);</span><br><span class="line">        mongoTemplate.removeMongoDbFactory();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">      logger.error(&quot;&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建相关配置类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.aimashi.dynamicmongo.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by AI码师 on 2019&#x2F;4&#x2F;19.</span><br><span class="line"> * 关注公众号【AI码师】领取2021最新面试资料一份（很全）</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Service</span><br><span class="line">public class MongotemplteService &#123;</span><br><span class="line">  private MongoTemplate mongoTemplate;</span><br><span class="line">  public &lt;T&gt; T save(String dbName, T var1) &#123;</span><br><span class="line">    return mongoTemplate.save(var1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.aimashi.dynamicmongo.config;</span><br><span class="line"></span><br><span class="line">import com.mongodb.client.MongoDatabase;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.data.mongodb.core.MongoDatabaseFactorySupport;</span><br><span class="line">import org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"></span><br><span class="line">public class MultiMongoTemplate extends MongoTemplate &#123;</span><br><span class="line">    private Logger logger&#x3D; LoggerFactory.getLogger(MultiMongoTemplate.class);</span><br><span class="line">&#x2F;&#x2F;用来缓存当前MongoDbFactory</span><br><span class="line">    private static ThreadLocal&lt;MongoDatabaseFactorySupport&gt; mongoDbFactoryThreadLocal;</span><br><span class="line">    public MultiMongoTemplate(MongoDatabaseFactorySupport mongoDbFactory)&#123;</span><br><span class="line">        super(mongoDbFactory);</span><br><span class="line">        if(mongoDbFactoryThreadLocal&#x3D;&#x3D;null) &#123;</span><br><span class="line">            mongoDbFactoryThreadLocal &#x3D; new ThreadLocal&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMongoDbFactory(MongoDatabaseFactorySupport factory)&#123;</span><br><span class="line">        mongoDbFactoryThreadLocal.set(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void removeMongoDbFactory()&#123;</span><br><span class="line">        mongoDbFactoryThreadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public MongoDatabase getDb() &#123;</span><br><span class="line">        return mongoDbFactoryThreadLocal.get().getMongoDatabase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加测试接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Created by AI码师 on 2019&#x2F;4&#x2F;19.</span><br><span class="line"> * 关注公众号【AI码师】领取2021最新面试资料一份（很全）</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;&#x2F; dbName 为数据库名称</span><br><span class="line">   @PutMapping</span><br><span class="line">    public String addDataByDynamic(@RequestParam(value &#x3D; &quot;dbName&quot;) String dbName,@RequestParam(value &#x3D; &quot;name&quot;) String name,@RequestParam(value &#x3D; &quot;addr&quot;) String addr,@RequestParam(value &#x3D; &quot;email&quot;) String email)&#123;</span><br><span class="line">        Student student &#x3D; new Student();</span><br><span class="line">        student.setAddr(addr);</span><br><span class="line">        student.setName(name);</span><br><span class="line">        student.setEmail(email);</span><br><span class="line">        mongotemplteService.insert(dbName,student);</span><br><span class="line">        return &quot;添加成功&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>请求接口：数据库名参数传了 ams1</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614415837060-328c0774-013b-4ffb-a1c3-96518ae813f3.png#align=left&display=inline&height=710&margin=%5Bobject%20Object%5D&originHeight=710&originWidth=2646&size=0&status=done&style=none&width=2646"></p><p>请求响应：响应成功<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614415837004-9aff068a-ac7a-495f-8348-87bcd32259c2.png#align=left&display=inline&height=682&margin=%5Bobject%20Object%5D&originHeight=682&originWidth=2858&size=0&status=done&style=none&width=2858"></p><p>我们看下数据库，发现在数据库 ams1 下面已经有了此数据：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614415837039-f3166664-e6c7-46ab-b603-0891c4ed67e7.png#align=left&display=inline&height=266&margin=%5Bobject%20Object%5D&originHeight=266&originWidth=2472&size=0&status=done&style=none&width=2472"></p><p>我们将数据库名参数修改为：ams2，进行请求</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614415837062-4605d6cd-2ba2-41ce-982c-0d13470b03f1.png#align=left&display=inline&height=694&margin=%5Bobject%20Object%5D&originHeight=694&originWidth=2794&size=0&status=done&style=none&width=2794"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614415837028-3c02ca29-02aa-4a1a-9a26-010d57ae96a4.png#align=left&display=inline&height=316&margin=%5Bobject%20Object%5D&originHeight=316&originWidth=2506&size=0&status=done&style=none&width=2506"></p><p>发现数据源已经切换成功了。</p><p>到这里，大家有没有发现自己很牛逼了啊，不过本篇文章还没算完，现在虽然已经实现了动态切换数据源的功能，但是还只能在自己项目上用，别的项目需要使用，只能直接复制过去，我们接下来需要做一个更牛逼的事情：手写一个 starter 来封装这个功能，别人只需要引入依赖，即可开箱即用：</p><h3 id="【整合到-starter-里面】"><a href="#【整合到-starter-里面】" class="headerlink" title="【整合到 starter 里面】"></a>【整合到 starter 里面】</h3><ul><li>创建一个 maven 项目：dynamicmongo-starter</li></ul><p>将如下文件拷贝到新项目中<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12552073/1614415837061-4c6d37d5-05f5-4d4f-ac74-b541de6135ce.png#align=left&display=inline&height=126&margin=%5Bobject%20Object%5D&originHeight=126&originWidth=480&size=0&status=done&style=none&width=480"></p><ul><li>创建自动装配文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.aimashi.dynamicmongo.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by AI码师 on 2019&#x2F;4&#x2F;19.</span><br><span class="line"> * 关注公众号【AI码师】领取2021最新面试资料一份（很全）</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Configuration(proxyBeanMethods &#x3D; false)</span><br><span class="line">public class MongodbAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public MongoSwitch mongoSwitch() &#123;</span><br><span class="line">return new MongoSwitch();</span><br><span class="line">&#125;</span><br><span class="line">@Bean</span><br><span class="line">public MongotemplteService mongotemplteService() &#123;</span><br><span class="line">return new MongotemplteService();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>新建 resources/META_INF/spring.factories 文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\</span><br><span class="line">    com.aimashi.dynamicmongo.config.MongodbAutoConfiguration</span><br></pre></td></tr></table></figure><p>到这里 starter 已经编写完成，是不是很简单。。</p><h3 id="【使用-starter】"><a href="#【使用-starter】" class="headerlink" title="【使用 starter】"></a>【使用 starter】</h3><p>starter 已经编写好，我们只需要在项目中引入该依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aimashi&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dynamicmongo-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>然后在需要操作 mongod 方法的地方，引入：MongotemplteService 即可；</p><p>注意 MongotemplteService 里面的方法大家按需扩充，目前只写了一个，大家使用的时候，只需要把 mongoTemplate 里面的方法名写到 MongotemplteService 中，然后再去调用 mongoTemplate 里面对应方法即可。</p><h2 id="【总结】"><a href="#【总结】" class="headerlink" title="【总结】"></a>【总结】</h2><p>很少写这么长的实践类文章，现在已经十一点半了，该休息了，后面会有更多文章和大家一起分享，希望大家能有所收获，晚安！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关注公众号“AI 码师”领取 2021 最新面试资料一份，公众号内回复“源码”，获取本项目源码&lt;/p&gt;
&lt;h2 id=&quot;【前言】&quot;&gt;&lt;a href=&quot;#【前言】&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;【前言】&lt;/h2&gt;&lt;p&gt;主演：老王(技</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>工作经验｜lambada处理集合的常用10种实战骚操作，我都记录下来了</title>
    <link href="http://example.com/2021/02/27/yuque/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%EF%BD%9Clambada%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88%E7%9A%84%E5%B8%B8%E7%94%A810%E7%A7%8D%E5%AE%9E%E6%88%98%E9%AA%9A%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%88%91%E9%83%BD%E8%AE%B0%E5%BD%95%E4%B8%8B%E6%9D%A5%E4%BA%86/"/>
    <id>http://example.com/2021/02/27/yuque/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%EF%BD%9Clambada%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88%E7%9A%84%E5%B8%B8%E7%94%A810%E7%A7%8D%E5%AE%9E%E6%88%98%E9%AA%9A%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%88%91%E9%83%BD%E8%AE%B0%E5%BD%95%E4%B8%8B%E6%9D%A5%E4%BA%86/</id>
    <published>2021-02-27T06:54:08.000Z</published>
    <updated>2021-02-27T09:52:24.387Z</updated>
    
    <content type="html"><![CDATA[<p>关注公众号“AI 码师”领取 2021 最新面试资料一份，公众号内回复“源码”，获取本项目源码</p><p>最近在项目上面经常使用 lambada 表达式，但是总是记不住，一直都在百度，写完之后就忘记了，感觉很费时间；这次就花点时间，把一些常用的 lambada 处理集合的实例都保存了下来(去重，分组，求和，list 转 map 等等)，以后就不用到处找了，刚好也可以给同学们分享下；另外也把一些关于使用 lambada 时遇到的坑也给大家一起分享下，所有代码拿来即用！！！本文档持续更新…</p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>商品实体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class GoodInfo &#123;</span><br><span class="line">    private String mallSource;</span><br><span class="line">    private String skuNo;</span><br><span class="line">    private int price;</span><br><span class="line">    private int monthCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>集合排序在项目中用的频率还蛮高，这里以按照销量排序为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 按照销量正序 从小到大排序</span><br><span class="line"> goodInfos.sort(Comparator.comparing(GoodInfo::getMonthCount));</span><br><span class="line"> &#x2F;&#x2F; 按照销量倒序 从大到小排序</span><br><span class="line"> goodInfos.sort(Comparator.comparing(GoodInfo::getMonthCount).reversed());</span><br></pre></td></tr></table></figure><h3 id="取最大值-取最小值-求和"><a href="#取最大值-取最小值-求和" class="headerlink" title="取最大值/取最小值/求和"></a>取最大值/取最小值/求和</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取最大销量  注意如果求最大值是在filter之后使用例如，goodInfos.stream().filter().max一定要判断filter后集合数量是否不为空，否则使用max的get方法会报错</span><br><span class="line">GoodInfo hotGoodInfo &#x3D; goodInfos.stream().max(Comparator.comparing(GoodInfo::getMonthCount)).get();</span><br><span class="line">&#x2F;&#x2F; 求最低价格商品</span><br><span class="line">GoodInfo lowPriceGoodInfo &#x3D; goodInfos.stream().min(Comparator.comparing(GoodInfo::getMonthCount)).get();</span><br><span class="line">&#x2F;&#x2F; 计算商品总价格</span><br><span class="line">int sum &#x3D; goodInfos.stream().mapToInt(person -&gt; person.getPrice()).sum();</span><br><span class="line">&#x2F;&#x2F; 求平均价格</span><br><span class="line">double avg &#x3D; goodInfos.stream().mapToInt(person -&gt; person.getPrice()).average().getAsDouble();</span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line"> goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 遍历输出所有商品id</span><br><span class="line"> goodInfos.forEach(</span><br><span class="line">     goodInfo -&gt; &#123;</span><br><span class="line">       System.out.println(goodInfo.getSkuNo());</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><h3 id="实体集合-转-单个属性的集合"><a href="#实体集合-转-单个属性的集合" class="headerlink" title="实体集合 转 单个属性的集合"></a>实体集合 转 单个属性的集合</h3><p>往往在我们项目中会有这样的需求：我需要提取集合中某一个属性，然后组装成集合，通常做法是先创建一个字符串集合，然后遍历原始集合，取出数据，放到字符串集合中，虽然也能实现功能，但是不免太过于繁琐，现在使用一行 lambada 表达式即可搞定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将list转为某个属性map 这里是把所有skuno全部取出来 作为集合</span><br><span class="line">List&lt;String&gt; skuNos &#x3D; goodInfos.stream().map(goodInfo -&gt; goodInfo.getSkuNo()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="实体集合-转-map-返回"><a href="#实体集合-转-map-返回" class="headerlink" title="实体集合 转 map 返回"></a>实体集合 转 map 返回</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将list转为map，key 为商品id</span><br><span class="line">Map&lt;String, GoodInfo&gt; map &#x3D; goodInfos.stream().collect(Collectors.toMap(GoodInfo::getSkuNo, goodInfo -&gt; goodInfo));</span><br></pre></td></tr></table></figure><h3 id="实体集合按照某个属性分组"><a href="#实体集合按照某个属性分组" class="headerlink" title="实体集合按照某个属性分组"></a>实体集合按照某个属性分组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 按照商品来源分组</span><br><span class="line">Map&lt;String, List&lt;GoodInfo&gt;&gt; map &#x3D; goodInfos.stream().collect(Collectors.groupingBy(GoodInfo::getMallSource));</span><br></pre></td></tr></table></figure><h3 id="过滤数据（记得接收）"><a href="#过滤数据（记得接收）" class="headerlink" title="过滤数据（记得接收）"></a>过滤数据（记得接收）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 过滤商品价格大于300的</span><br><span class="line">&#x2F;&#x2F; todo 过滤后一定要使用集合接收，否则等于没有过滤</span><br><span class="line"></span><br><span class="line">List&lt;GoodInfo&gt; collect &#x3D;</span><br><span class="line">    goodInfos.stream()</span><br><span class="line">        .filter(goodInfo -&gt; goodInfo.getPrice() &gt; 300)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">collect.forEach(</span><br><span class="line">    goodInfo -&gt; &#123;</span><br><span class="line">      System.out.println(goodInfo.getPrice());</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="去重-两种方法可选"><a href="#去重-两种方法可选" class="headerlink" title="去重(两种方法可选)"></a>去重(两种方法可选)</h3><h4 id="方法一-set-去重"><a href="#方法一-set-去重" class="headerlink" title="方法一 set 去重"></a>方法一 set 去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用treeset 集合来实现去重，这里一定要使用集合接收，不然等于没有去重</span><br><span class="line">List&lt;GoodInfo&gt; goodInfos1 &#x3D;</span><br><span class="line">    goodInfos.stream()</span><br><span class="line">        .collect(</span><br><span class="line">            Collectors.collectingAndThen(</span><br><span class="line">                Collectors.toCollection(</span><br><span class="line">                    () -&gt; new TreeSet&lt;&gt;(Comparator.comparing(o -&gt; o.getSkuNo()))),</span><br><span class="line">                ArrayList::new));</span><br></pre></td></tr></table></figure><h4 id="方法二-map-去重"><a href="#方法二-map-去重" class="headerlink" title="方法二 map 去重"></a>方法二 map 去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    List&lt;GoodInfo&gt; goodInfos &#x3D; Arrays.asList();</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_1112312312&quot;, 199, 100000));</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;tb&quot;, &quot;tb_23534231231&quot;, 399, 10));</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_1110080098&quot;, 299, 100));</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;jd&quot;, &quot;jd_412313123&quot;, 99, 10000000));</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_354532431&quot;, 599, 1));</span><br><span class="line">    goodInfos.add(new GoodInfo(&quot;pdd&quot;, &quot;pdd_1423124131&quot;, 499, 10));</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 使用map去重</span><br><span class="line">    List&lt;GoodInfo&gt; goodInfos2 &#x3D;</span><br><span class="line">        goodInfos.stream()</span><br><span class="line">            .filter(distinctByKey(goodInfo -&gt; goodInfo.getSkuNo()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static &lt;T&gt; Predicate&lt;T&gt; distinctByKey(Function&lt;? super T, ?&gt; keyExtractor) &#123;</span><br><span class="line">    Map&lt;Object, Boolean&gt; seen &#x3D; new ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    return t -&gt; seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) &#x3D;&#x3D; null;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="坑一"><a href="#坑一" class="headerlink" title="坑一"></a>坑一</h3><ul><li>报错信息：<br>java.util.NoSuchElementException: No value present</li><li>解决方案：<br>一般出现这个错都是在 filter 操作后面使用了 max/min 等操作，然后调用了 get 方法，取不到数据，导致报错，所以建议检查 filter 操作后时候还有数据，有数据再进行后续操作：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    Optional&lt;User&gt; optional &#x3D; goodInfos.stream().max(userComparator);</span><br><span class="line">if(optional !&#x3D; null &amp;&amp; optional.isPresent()) &#123;</span><br><span class="line">    recentUserServer &#x3D; optional.get().getServer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="坑二"><a href="#坑二" class="headerlink" title="坑二"></a>坑二</h3><ul><li>使用了 filter 为什么没起作用呢？</li></ul><p>调用 filter 之后，它是有返回值的，所以你需要使用新的集合去接收</p><p>。。。</p><p>后续慢慢填坑</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关注公众号“AI 码师”领取 2021 最新面试资料一份，公众号内回复“源码”，获取本项目源码&lt;/p&gt;
&lt;p&gt;最近在项目上面经常使用 lambada 表达式，但是总是记不住，一直都在百度，写完之后就忘记了，感觉很费时间；这次就花点时间，把一些常用的 lambada 处理集合</summary>
      
    
    
    
    
  </entry>
  
</feed>
